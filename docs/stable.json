{
    "meta": {
        "generator": "0.9.0",
        "format": 20,
        "date": 1617364677818
    },
    "custom": {
        "general": {
            "name": "General",
            "files": {
                "welcome": {
                    "name": "Welcome",
                    "type": "md",
                    "content": "<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"/static/logo.svg\" width=\"546\" alt=\"discord.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://img.shields.io/discord/222078108977594368?color=7289da&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\n\nWelcome to the discord.js v12 documentation.\n\n## About\n\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to easily interact with the\n[Discord API](https://discord.com/developers/docs/intro).\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n\n**Node.js 12.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install discord.js`  \nWith voice support ([@discordjs/opus](https://www.npmjs.com/package/@discordjs/opus)): `npm install discord.js @discordjs/opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discord.js opusscript`\n\n### Audio engines\n\nThe preferred audio engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus.\nUsing opusscript is only recommended for development environments where @discordjs/opus is tough to get working.\nFor production bots, using @discordjs/opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for WebSocket data compression and inflation (`npm install zlib-sync`)\n- [erlpack](https://github.com/discord/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install discord/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n  - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n  - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection (`npm install bufferutil`)\n- [utf-8-validate](https://www.npmjs.com/package/utf-8-validate) in combination with `bufferutil` for much faster WebSocket processing (`npm install utf-8-validate`)\n\n## Example usage\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n\n- [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n- [Documentation](https://discord.js.org/#/docs/main/master/general/welcome)\n- [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide)) - this is still for stable  \n  See also the WIP [Update Guide](https://discordjs.guide/additional-info/changes-in-v12.html) also including updated and removed items in the library.\n- [Discord.js Discord server](https://discord.gg/bRCvFy9)\n- [Discord API Discord server](https://discord.gg/discord-api)\n- [GitHub](https://github.com/discordjs/discord.js)\n- [NPM](https://www.npmjs.com/package/discord.js)\n- [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n\n- [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## Contributing\n\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Discord.js Server](https://discord.gg/bRCvFy9).\n",
                    "path": "docs/general/welcome.md"
                },
                "updating": {
                    "name": "Updating your code",
                    "type": "md",
                    "content": "# Version 12.0.0\n\nv12.0.0 contains many new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/12.0.0) for a full list of changes.\nYou can also visit [the guide](https://discordjs.guide/additional-info/changes-in-v12.html) for help with updating your v11 code to v12.\n\n# Version 11.1.0\n\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\n\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n\n- Message Reactions and Embeds (rich text)\n- Support for uws and erlpack for better performance\n- OAuthApplication support\n- Web distributions\n\n## Breaking changes\n\n### Client.login() no longer supports logging in with email + password\n\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\n\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\n\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\n\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\n\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\n\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60,\n});\n```\n\nv10 code example:\n\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60,\n});\n```\n\n## Presences\n\nPresences have been completely restructured.\nPrevious versions of discord.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 discord.js code may look something like this:\n\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\n\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\n\nMany events have been renamed or had their arguments change.\n\n### Client events\n\n| Version 9                                      | Version 10                              |\n| ---------------------------------------------- | --------------------------------------- |\n| guildMemberAdd(guild, member)                  | guildMemberAdd(member)                  |\n| guildMemberAvailable(guild, member)            | guildMemberAvailable(member)            |\n| guildMemberRemove(guild, member)               | guildMemberRemove(member)               |\n| guildMembersChunk(guild, members)              | guildMembersChunk(members)              |\n| guildMemberUpdate(guild, oldMember, newMember) | guildMemberUpdate(oldMember, newMember) |\n| guildRoleCreate(guild, role)                   | roleCreate(role)                        |\n| guildRoleDelete(guild, role)                   | roleDelete(role)                        |\n| guildRoleUpdate(guild, oldRole, newRole)       | roleUpdate(oldRole, newRole)            |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n\n| Version 9    | Version 10 |\n| ------------ | ---------- |\n| disconnected | disconnect |\n\n## Dates and timestamps\n\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:  \n**Date:** `Message.createdAt`  \n**Timestamp:** `Message.createdTimestamp`  \nSee the docs for each structure to see which date/timestamps are available on them.\n\n# Version 9\n\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n\n- `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  - `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n- `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n- `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n- `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n- `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n\n- `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n- `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\n\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({ limit: 100 }).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n",
                    "path": "docs/general/updating.md"
                },
                "faq": {
                    "name": "FAQ",
                    "type": "md",
                    "content": "# Frequently Asked Questions\n\nThese questions are some of the most frequently asked.\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\n\nUpdate to Node.js 12.0.0 or newer.\n\n## How do I get voice working?\n\n- Install FFMPEG.\n- Install either the `@discordjs/opus` package or the `opusscript` package.\n  @discordjs/opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n\n- **npm:** `npm install ffmpeg-static`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-static` or see the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up @discordjs/opus?\n\n- **Ubuntu:** Simply run `npm install @discordjs/opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install @discordjs/opus` in your bot's directory should successfully build it. Woo!\n\nOther questions can be found at the [official Discord.js guide](https://discordjs.guide/popular-topics/common-questions.html)\nIf you have issues not listed here or on the guide, feel free to ask in the [official Discord.js server](https://discord.gg/bRCvFy9).\nAlways make sure to read the [documentation](https://discord.js.org/#/docs/main/stable/general/welcome).\n",
                    "path": "docs/general/faq.md"
                }
            }
        },
        "examples": {
            "name": "Examples",
            "files": {
                "ping": {
                    "name": "Ping",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/ping.js"
                },
                "avatars": {
                    "name": "Avatars",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * Send a user a link to their avatar\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/avatars.js"
                },
                "attachments": {
                    "name": "Attachments",
                    "type": "md",
                    "content": "# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [MessageAttachment](/#/docs/main/master/class/MessageAttachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!rip'\n  if (message.content === '!rip') {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n    // Send the attachment in the message channel\n    message.channel.send(attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/master/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!rip'\n  if (message.content === '!rip') {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author},`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [MessageAttachment](/#/docs/main/master/class/MessageAttachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!rip'\n  if (message.content === '!rip') {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment('./rip.png');\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author},`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example2.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Import the native fs module\nconst fs = require('fs');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!memes'\n  if (message.content === '!memes') {\n    // Get the buffer from the 'memes.txt', assuming that the file exists\n    const buffer = fs.readFileSync('./memes.txt');\n\n    /**\n     * Create the attachment using MessageAttachment,\n     * overwritting the default file name to 'memes.txt'\n     * Read more about it over at\n     * http://discord.js.org/#/docs/main/master/class/MessageAttachment\n     */\n    const attachment = new MessageAttachment(buffer, 'memes.txt');\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author}, here are your memes!`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n",
                    "path": "docs/examples/attachments.md"
                },
                "greeting": {
                    "name": "Server greeting",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * A bot that welcomes new guild members when they join\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.cache.find(ch => ch.name === 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/greeting.js"
                },
                "embed": {
                    "name": "Message Embed",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * An example of how you can send embeds\n */\n\n// Extract the required classes from the discord.js module\nconst { Client, MessageEmbed } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is \"how to embed\"\n  if (message.content === 'how to embed') {\n    // We can create embeds using the MessageEmbed constructor\n    // Read more about all that you can do with the constructor\n    // over at https://discord.js.org/#/docs/main/master/class/MessageEmbed\n    const embed = new MessageEmbed()\n      // Set the title of the field\n      .setTitle('A slick little embed')\n      // Set the color of the embed\n      .setColor(0xff0000)\n      // Set the main content of the embed\n      .setDescription('Hello, this is a slick embed!');\n    // Send the embed to the same channel as the message\n    message.channel.send(embed);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/embed.js"
                },
                "moderation": {
                    "name": "Moderation",
                    "type": "md",
                    "content": "# Moderation\n\nIn here, you'll see some basic examples for kicking and banning a member.\n\n## Kicking a member\n\nLet's say you have a member that you'd like to kick. Here is an example of how you _can_ do it.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Kick the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         */\n        member\n          .kick('Optional reason that will display in the audit logs')\n          .then(() => {\n            // We let the message author know we were able to kick the person\n            message.reply(`Successfully kicked ${user.tag}`);\n          })\n          .catch(err => {\n            // An error happened\n            // This is generally due to the bot not being able to kick the member,\n            // either due to missing permissions or role hierarchy\n            message.reply('I was unable to kick the member');\n            // Log the error\n            console.error(err);\n          });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply(\"That user isn't in this guild!\");\n      }\n      // Otherwise, if no user was mentioned\n    } else {\n      message.reply(\"You didn't mention the user to kick!\");\n    }\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/kick-example.png)\n\n## Banning a member\n\nBanning works the same way as kicking, but it has slightly more options that can be changed.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Ban the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         * Read more about what ban options there are over at\n         * https://discord.js.org/#/docs/main/master/class/GuildMember?scrollTo=ban\n         */\n        member\n          .ban({\n            reason: 'They were bad!',\n          })\n          .then(() => {\n            // We let the message author know we were able to ban the person\n            message.reply(`Successfully banned ${user.tag}`);\n          })\n          .catch(err => {\n            // An error happened\n            // This is generally due to the bot not being able to ban the member,\n            // either due to missing permissions or role hierarchy\n            message.reply('I was unable to ban the member');\n            // Log the error\n            console.error(err);\n          });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply(\"That user isn't in this guild!\");\n      }\n    } else {\n      // Otherwise, if no user was mentioned\n      message.reply(\"You didn't mention the user to ban!\");\n    }\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)\n",
                    "path": "docs/examples/moderation.md"
                },
                "webhook": {
                    "name": "Webhook",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n/*\n * Create a new webhook\n * The Webhooks ID and token can be found in the URL, when you request that URL, or in the response body.\n * https://discord.com/api/webhooks/12345678910/T0kEn0fw3Bh00K\n *                                  ^^^^^^^^^^  ^^^^^^^^^^^^ \n *                                  Webhook ID  Webhook Token\n */\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n",
                    "path": "docs/examples/webhook.js"
                }
            }
        }
    },
    "classes": [
        {
            "name": "BaseClient",
            "description": "The base class for all clients.",
            "extends": [
                [
                    [
                        "EventEmitter"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "_timeouts",
                    "description": "Timeouts set by {@link BaseClient#setTimeout} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Timeout",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 22,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_intervals",
                    "description": "Intervals set by {@link BaseClient#setInterval} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Timeout",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 29,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_immediates",
                    "description": "Intervals set by {@link BaseClient#setImmediate} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Immediate",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 36,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "options",
                    "description": "The options the client was instantiated with",
                    "type": [
                        [
                            [
                                "ClientOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 42,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "rest",
                    "description": "The REST manager of the client",
                    "access": "private",
                    "type": [
                        [
                            [
                                "RESTManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 49,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "api",
                    "description": "API shortcut",
                    "access": "private",
                    "readonly": true,
                    "type": [
                        [
                            [
                                "Object"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 58,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "description": "Destroys all assets used by the base client.",
                    "meta": {
                        "line": 65,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setTimeout",
                    "description": "Sets a timeout that will be automatically cancelled if the client is destroyed.",
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "delay",
                            "description": "Time to wait before executing (in milliseconds)",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Timeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 81,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearTimeout",
                    "description": "Clears a timeout.",
                    "params": [
                        {
                            "name": "timeout",
                            "description": "Timeout to cancel",
                            "type": [
                                [
                                    [
                                        "Timeout"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 94,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setInterval",
                    "description": "Sets an interval that will be automatically cancelled if the client is destroyed.",
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "delay",
                            "description": "Time to wait between executions (in milliseconds)",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Timeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 106,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearInterval",
                    "description": "Clears an interval.",
                    "params": [
                        {
                            "name": "interval",
                            "description": "Interval to cancel",
                            "type": [
                                [
                                    [
                                        "Timeout"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 116,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setImmediate",
                    "description": "Sets an immediate that will be automatically cancelled if the client is destroyed.",
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Immediate"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 127,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearImmediate",
                    "description": "Clears an immediate.",
                    "params": [
                        {
                            "name": "immediate",
                            "description": "Immediate to cancel",
                            "type": [
                                [
                                    [
                                        "Immediate"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 137,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "incrementMaxListeners",
                    "description": "Increments max listeners by one, if they are not zero.",
                    "access": "private",
                    "meta": {
                        "line": 146,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "decrementMaxListeners",
                    "description": "Decrements max listeners by one, if they are not zero.",
                    "access": "private",
                    "meta": {
                        "line": 157,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                }
            ],
            "meta": {
                "line": 13,
                "file": "BaseClient.js",
                "path": "src/client"
            }
        }
    ]
}