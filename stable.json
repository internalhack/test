{
    "meta": {
        "generator": "0.10.0",
        "format": 20,
        "date": 1625319435177
    },
    "custom": {
        "general": {
            "name": "General",
            "files": {
                "Welcome": {
                    "name": "Welcome",
                    "type": "md",
                    "content": "# Discord Economy Super\r\n\r\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\r\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\r\n\r\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\r\n\r\n## Install\r\n<b>Please note:</br><b>\r\n<b>Node.js 14.0.0 or newer is required.</b><br>\r\n<b>All types in brackets mean the type of what the method or event returns.</b>\r\n```console\r\nnpm i discord-economy-super\r\n```\r\n\r\n## Table of Contents\r\n<ul>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#starting\">Starting</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#constructor-options\">Constructor Options</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#module-methods\">Module Methods</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#module-properties\">Module Properties</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#module-events\">Module Events</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#example-events-usage\">Example Events Usage</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#balance-methods\">Balance Methods</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#bank-methods\">Bank Methods</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#shop-methods\">Shop Methods</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#changelog\">Changelog</a></b></li>\r\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#useful-links\">Useful Links</a></b></li>\r\n</ul>\r\n\r\n## Starting\r\n<b>Let's create a simple Discord.js Client:</b>\r\n\r\n```js\r\nconst { Client, Intents } = require('discord.js'); // npm i discord.js\r\nconst client = new Client({ partials: ['CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION', 'USER'], ws: { intents: Intents.ALL } });\r\n\r\nclient.on('ready', () => {\r\n  console.log(`${bot.user.tag} is ready!`);\r\n});\r\n\r\nclient.login('token') // https://discord.com/developers/applications\r\n```\r\n<b>Now we need to import and initialize 'discord-economy-super':</b>\r\n\r\n```js\r\nconst { Client, Intents } = require('discord.js') // npm i discord.js\r\nconst client = new Client({\r\n    partials: ['CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION', 'USER'], \r\n    ws: {\r\n        intents: Intents.ALL \r\n    } \r\n});\r\n\r\nconst Economy = require('discord-economy-super');\r\nconst eco = new Economy({\r\n  storagePath: './storage.json', // Full path to a JSON File. Default: './storage.json'.\r\n  checkStorage: true, // Checks the if database file exists and if it has errors. Default: true.\r\n  dailyCooldown: 60000 * 60 * 24, // Daily Cooldown, ms (24 Hours = 1 Day). Default: 24 Hours (60000 * 60 * 24) ms.\r\n  workCooldown: 60000 * 60, // Work Cooldown, ms (1 Hour). Default: 1 Hour (60000 * 60) ms.\r\n  weeklyCooldown: 60000 * 60 * 24 * 7, // Cooldown for Weekly Command (in ms). Default: 7 Days (60000 * 60 * 24 * 7) ms\r\n  dailyAmount: 100, // Daily Amount. Default: 100.\r\n  workAmount: [10, 50], // Work Amount: first element is min value, second is max value (It also can be a Number). Default: [10, 50].\r\n  weeklyAmount: 1000, // Amount of money for Weekly Command. Default: 1000.\r\n  updateCountdown: 1000, // Checks for if storage file exists in specified time (in ms). Default: 1000.\r\n  dateLocale: 'ru', // The region (example: ru; en) to format date and time. Default: 'ru'.\r\n  updater: {\r\n        checkUpdates: true, // Sends the update state message in console on start. Default: true.\r\n        upToDateMessage: true // Sends the message in console on start if module is up to date. Default: true.\r\n    },\r\n    errorHandler: {\r\n        handleErrors: true, // Handles all errors on start. Default: true.\r\n        attempts: 5, // Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5.\r\n        time: 3000 // Time between every attempt to start the module. Default: 3000.\r\n    }\r\n});\r\n\r\nclient.on('ready', () => {\r\n  console.log(`${bot.user.tag} is ready!`);\r\n});\r\n\r\nclient.login('token') // https://discord.com/developers/applications\r\n```\r\n<br>\r\n<b>Now I will explain everything.</b>\r\n<b>This Module has a Constructor to initialize this Economy Module.</b>\r\n<br>\r\n\r\n## Constructor Options\r\n<ul>\r\n  <li><b>options.storagePath</b>: <b>Path for JSON File. Default: './storage.json.' (String)</b></li>\r\n  <li><b>options.checkStorage</b>: <b>Checks the if database file exists and if it has errors. Default: true. (Boolean)</b></li>\r\n  <li><b>options.dailyCooldown</b>: <b>Cooldown for Daily Command (in ms). Default: 24 Hours (60000 * 60 * 24) ms. (Number)</b></li>\r\n  <li><b>options.dailyAmount</b>: <b>Amount of money for Daily Command. Default: 100. (Number)</b></li>\r\n  <li><b>options.workCooldown</b>: <b>Cooldown for Work Command (in ms). Default: 1 Hour (60000 * 60) ms. (Number)</b></li>\r\n  <li><b>options.workAmout</b>: <b>Amount of money for Work Command. Default: [10, 50]. (Number)</b></li>\r\n  <li><b>options.updateCountdown</b>: <b>Checks for if storage file exists in specified time (in ms). Default: 1000. (Number)</b></li>\r\n  <li><b>options.dateLocale</b>: <b>The region (example: ru; en) to format date and time. Default: ru. (String)</b></li>\r\n  <li><b>options.updater</b>: <b>Update Checker options object:</b>\r\n   <ul>\r\n   <li><b>options.updater.checkUpdates.</b>: <b>Sends the update state message in console on start. Default: true. (Boolean)</b></li>\r\n   <li><b>options.updater.upToDateMessage</b>: <b> Sends the message in console on start if module is up to date. Default: true. (Boolean)</b></li>\r\n</ul>\r\n  <li><b>options.errorHandler</b>: <b>Error Handler options object:</b>\r\n   <ul>\r\n   <li><b>options.errorHandler.handleErrors.</b>: <b>Handles all errors on startup. Default: true. (Boolean)</b></li>\r\n   <li><b>options.errorHandler.attempts</b>: <b>Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5. (Number)</b></li>\r\n    <li><b>options.errorHandler.time</b>: <b>Time between every attempt to start the module. Default: 3000. (Number)</b></li>\r\n</ul>\r\n</ul>\r\n<b>Once the module starts, the update checker will show you a beautiful message in your console!</b>\r\n\r\n![Up To Date Example](https://cdn.discordapp.com/attachments/824016114191302699/830855168932315136/Screenshot_6.png)\r\n\r\n![Out Of Date Example](https://cdn.discordapp.com/attachments/824016114191302699/830855167120244736/Screenshot_5.png)\r\n\r\n## Module Methods\r\n<ul>\r\n  <li><b>daily(memberID, guildID)</b>: <b>Adds a daily reward on user's balance. (Object)</b></li>\r\n  <li><b>work(memberID, guildID)</b>: <b>Adds a work reward on user's balance. (Object)</b></li>\r\n  <li><b>weekly(memberID, guildID)</b>: <b>Adds a weekly reward on user's balance. (Object)</b></li>\r\n  <br>\r\n  <li><b>getDailyCooldown(memberID, guildID)</b>: <b>Returns a user's daily Cooldown. (Number)</b></li>\r\n  <li><b>getWorkCooldown(memberID, guildID)</b>: <b>Returns a user's work Cooldown. (Number)</b></li>\r\n  <li><b>getWeeklyCooldown(memberID, guildID)</b>: <b>Returns a user's weekly Cooldown. (Number)</b></li>\r\n  <br>\r\n  <li><b>clearDailyCooldown(memberID, guildID)</b>: <b>Clears user's daily cooldown. (Boolean)</b></li>\r\n  <li><b>clearWorkCooldown(memberID, guildID)</b>: <b>Clears user's work cooldown. (Boolean)</b></li>\r\n  <li><b>clearWeeklyCooldown(memberID, guildID)</b>: <b>Clears user's weekly cooldown. (Boolean)</b></li>\r\n  <br>\r\n  <li><b>all()</b>: <b>Returns the database contents. (Object)</b></li>\r\n  <li><b>checkUpdates()</b>: <b>Checks for if the module is up to date. Returns a promise with data object. (Promise: Object)</b></li>\r\n  <br>\r\n  <li><b>removeGuild(guildID)</b>: Fully removes the guild from database. (Boolean)</li>\r\n  <li><b>removeUser(memberID, guildID)</b>: Removes the user from database. (Boolean)</li>\r\n  <br>\r\n  <li><b>clearStorage()</b>: Clears the storage file. (Boolean)</li>\r\n  <li><b>kill()</b>: Kills the Economy instance. (Economy Instance)</li>\r\n  <li><b>init()</b>: Starts the module. (Promise: Boolean)</li>\r\n</ul>\r\n\r\n## Module Properties\r\n<ul>\r\n<li><b>Economy.version</b>: <b>Returns the module version. (Boolean)</b></li>\r\n<li><b>Economy.options</b>: <b>Returns the options object that you put in the Constructor (Object)</b></li>\r\n<li><b>Economy.EconomyError</b>: <b>Returns the error class that this module is using. (Class)</b></li>\r\n<li><b>Economy.shop</b>: <b>Methods to manage and use the shop on your Discord server. (Object)</b></li>\r\n<li><b>Economy.ready</b>: <b>Module ready status. (Boolean)</b></li>\r\n<li><b>Economy.errored</b>: <b>Module errored status. (Boolean)</b></li>\r\n<li><b>Economy.interval</b>: <b>Database checking interval. (NodeJS.Timeout)</b></li>\r\n<li><b>Economy.errors</b>: <b>Module errors object. (Object)</b></li>\r\n</ul>\r\n\r\n## Module Events\r\n<ul>\r\n<li><b>Economy.on('balanceSet')</b>: <b>Emits when you set the balance. (Object)</b></li>\r\n<li><b>Economy.on('balanceAdd')</b>: <b>Emits when you add money on user's balance. (Object)</b></li>\r\n<li><b>Economy.on('balanceSubtract')</b>: <b>Emits when you subtract money from user's balance. (Object)</b></li>\r\n<br>\r\n<li><b>Economy.on('bankSet')</b>: <b>Emits when you set the bank balance. (Object)</b></li>\r\n<li><b>Economy.on('bankAdd')</b>: <b>Emits when you add money on user's bank balance. (Object)</b></li>\r\n<li><b>Economy.on('bankSubtract')</b>: <b>Emits when you subtract money from user's bank balance. (Object)</b></li>\r\n<br>\r\n<li><b>Economy.on('shopAddItem')</b>: <b>Emits when you add the item in the guild shop. (Object)</b></li>\r\n<li><b>Economy.on('shopEditItem')</b>: <b>Emits when you edit the item in the guild shop. (Object)</b></li>\r\n<li><b>Economy.on('shopRemoveItem')</b>: <b>Emits when you remove the item from the guild shop. (Object)</b></li>\r\n<li><b>Economy.on('shopClear')</b>: <b>Emits when you clear the shop. (Boolean)</b></li>\r\n<li><b>Economy.on('shopItemBuy')</b>: <b>Emits when someone just bought the item from the shop. (Object)</b></li>\r\n<li><b>Economy.on('shopItemUse')</b>: <b>Emits when someone just used the item from his inventory. (Object)</b></li>\r\n<br>\r\n<li><b>Economy.on('ready')</b>: <b>Emits when the economy instance is ready. (Void)</b></li>\r\n<li><b>Economy.on('destroy')</b>: <b>Emits when the economy instance is destroyed. (Void)</b></li>\r\n</ul>\r\n\r\n## Example Events Usage\r\n```js\r\nconst { Client, Intents } = require('discord.js') // npm i discord.js\r\nconst client = new Client({\r\n    partials: ['CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION', 'USER'], \r\n    ws: {\r\n        intents: Intents.ALL \r\n    }\r\n});\r\n\r\nconst Economy = require('discord-economy-super');\r\nconst eco = new Economy({\r\n  storagePath: './storage.json', // Full path to a JSON File. Default: './storage.json'.\r\n  checkStorage: true, // Checks the if database file exists and if it has errors. Default: true.\r\n  dailyCooldown: 60000 * 60 * 24, // Daily Cooldown, ms (24 Hours = 1 Day). Default: 24 Hours (60000 * 60 * 24) ms.\r\n  workCooldown: 60000 * 60, // Work Cooldown, ms (1 Hour). Default: 1 Hour (60000 * 60) ms.\r\n  weeklyCooldown: 60000 * 60 * 24 * 7, // Cooldown for Weekly Command (in ms). Default: 7 Days (60000 * 60 * 24 * 7) ms\r\n  dailyAmount: 100, // Daily Amount. Default: 100.\r\n  workAmount: [10, 50], // Work Amount: first element is min value, second is max value (It also can be a Number). Default: [10, 50].\r\n  weeklyAmount: 1000, // Amount of money for Weekly Command. Default: 1000.\r\n  updateCountdown: 1000, // Checks for if storage file exists in specified time (in ms). Default: 1000.\r\n  dateLocale: 'ru', // The region (example: ru; en) to format date and time. Default: 'ru'.\r\n  updater: {\r\n        checkUpdates: true, // Sends the update state message in console on start. Default: true.\r\n        upToDateMessage: true // Sends the message in console on start if module is up to date. Default: true.\r\n    },\r\n    errorHandler: {\r\n        handleErrors: true, // Handles all errors on start. Default: true.\r\n        attempts: 5, // Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5.\r\n        time: 3000 // Time between every attempt to start the module. Default: 3000.\r\n    }\r\n});\r\n\r\nclient.on('ready', () => {\r\n  console.log(`${bot.user.tag} is ready!`);\r\n});\r\n\r\n// balance events\r\neco.on('balanceSet', balance => {\r\n    console.log(`Someone's just set ${balance.amount} coins for balance for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\r\n})\r\neco.on('balanceAdd', balance => {\r\n    console.log(`Someone's just added ${balance.amount} coins for balance for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\r\n})\r\neco.on('balanceSubtract', balance => {\r\n    console.log(`Someone's just subtracted ${balance.amount} coins from balance for member ${balance.memberID} on guild ${balance.guildID}. His balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'.`)\r\n})\r\n\r\n\r\n// bank balance events\r\neco.on('bankSet', balance => {\r\n    console.log(`Someone's just set ${balance.amount} coins in bank for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\r\n})\r\neco.on('bankAdd', balance => {\r\n    console.log(`Someone's just added ${balance.amount} coins in bank for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\r\n})\r\neco.on('bankSubtract', balance => {\r\n    console.log(`Someone's just subtracted ${balance.amount} coins from bank for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\r\n})\r\n\r\n// shop events\r\neco.on('shopAddItem', item => {\r\n    console.log(`Someone's just added an item in the shop!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description}\\nMessage on use: ${item.message}\\nMax amount of item in inventory: ${item.maxAmount}\\nRole ID: ${item.role || 'Not specified'}`)\r\n})\r\neco.on('shopRemoveItem', item => {\r\n    console.log(`Someone's just removed an item from the shop!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description}\\nMessage on use: ${item.message}\\nMax amount of item in inventory: ${item.maxAmount}\\nRole ID: ${item.role || 'Not specified'}`)\r\n})\r\neco.on('shopEditItem', item => {\r\n    console.log(`Someone's just edited an item in the shop!\\nID: ${item.id}\\Guild ID: ${item.guildID}\\nWhat changed: ${item.changed}\\nBefore: ${item.oldValue}\\nAfter: ${item.newValue}`)\r\n})\r\neco.on('shopItemBuy', item => {\r\n    console.log(`Someone's just bought an item from the shop!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description || 'Not specified'}\\nMessage on use: ${item.message || 'Not specified'}\\nMax amount of item in inventory: ${item.maxAmount || 'Any'}\\nRole ID: ${item.role || 'Not specified'}`)\r\n})\r\neco.on('shopItemUse', item => {\r\n    console.log(`Someone's just used an item!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description || 'Not specified'}\\nMessage on use: ${item.message || 'Not specified'}\\nMax amount of item in inventory: ${item.maxAmount || 'Any'}\\nRole ID: ${item.role || 'Not specified'}`)\r\n})\r\neco.on('shopClear', cleared => {\r\n  if(cleared) console.log('The shop was cleared successfully!')\r\n  else console.log('Cannot clear the shop!')\r\n})\r\n\r\n\r\n// core events\r\neco.on('ready', () => {\r\n    console.log('Economy is ready!')\r\n})\r\neco.on('destroy', () => {\r\n    console.log('Economy was destroyed.')\r\n})\r\n\r\nclient.login('token') // https://discord.com/developers/applications\r\n```\r\n<br>\r\n\r\n## Balance Methods\r\n<ul>\r\n    <li><b>fetch(memberID, guildID)</b>: <b>Returns the user's balance. (Number)</b></li>\r\n    <li><b>set(amount, memberID, guildID, reason)</b>: <b>Sets money to user's balance. (Number)</b></li>\r\n    <li><b>add(amount, memberID, guildID, reason)</b>: <b>Adds money to user's balance. (Number)</b></li>\r\n    <li><b>subtract(amount, memberID, guildID, reason)</b>: <b>Subtracts money from user's balance. (Number)</b></li>\r\n    <li><b>leaderboard(guildID)</b>: <b>Returns a money leaderboard array. (Array)</b></li>\r\n</ul>\r\n\r\n## Bank Methods\r\n<ul>\r\n    <li><b>fetch(memberID, guildID)</b>: <b>Returns the user's bank balance. (Number)</b></li>\r\n    <li><b>set(amount, memberID, guildID, reason)</b>: <b>Sets money to user's bank balance. (Number)</b></li>\r\n    <li><b>add(amount, memberID, guildID, reason)</b>: <b>Adds money to user's bank balance. (Number)</b></li>\r\n    <li><b>subtract(amount, memberID, guildID, reason)</b>: <b>Subtracts money from user's bank balance. (Number)</b></li>\r\n    <li><b>leaderboard(guildID)</b>: <b>Returns a bank balance leaderboard array. (Array)</b></li>\r\n</ul>\r\n\r\n## Shop Methods\r\n<ul>\r\n<li><b>Economy.shop.addItem(guildID, options)</b>: <b>Creates an item in shop. (Object)</b></li>\r\n   <ul>\r\n   <li><b>options.itemName</b>: <b>Name for the item. (String)</b></li>\r\n   <li><b>options.price</b>: <b>Price of the item. (Number)</b></li>\r\n   <li><b>options.message</b>: <b>Item message that will be returned on Economy.shop.buy() method. [Optional] (String)</b></li>\r\n   <li><b>options.description</b>: <b>Description of the item. [Optional] (String)</b></li> \r\n   <li><b>options.maxAmount</b>: <b>Max amount of item that user can hold in his inventory. [Optional] (Number)</b></li>\r\n   <li><b>options.role</b>: <b>A role ID that bot will give to others users. Please note: you need to specify a bot client in 'Economy.shop.useItem' method if you need to give a role to user on Discord server. [Optional] (String)</b></li>\r\n</ul>\r\n</li> \r\n<li><b>Economy.shop.buy(itemID, memberID, guildID, reason)</b>: <b>Buys the item from the shop. But if user try to buy an item when he reached the max amount of item in his inventory, it will return a 'max' string. (Boolean | String)</b></li>\r\n<li><b>Economy.shop.clear(guildID)</b>: <b>Clears the shop. (Boolean)</b></li>\r\n<li><b>Economy.shop.clearHistory(memberID, guildID)</b>: <b>Clears the user's purchases history. (Boolean)</b></li>\r\n<li><b>Economy.shop.clearInventory(memberID, guildID)</b>: <b>Clears the user's inventory. (Boolean)</b></li>\r\n<li><b>Economy.shop.editItem(itemID, guildID, arg, value)</b>: <b>Edits the item in shop. The 'arg' parameter must be one of these values: 'description', 'price', 'itemName', 'message', 'maxAmount' and 'role'. (Boolean)</b></li>\r\n<li><b>Economy.shop.history(memberID, guildID)</b>: <b>Shows the user's purchases history. (Array)</b></li>\r\n<li><b>Economy.shop.inventory(memberID, guildID)</b>: <b>Shows all items in user's inventory. (Array)</b></li>\r\n<li><b>Economy.shop.list(guildID)</b>: <b>Shows all items in the shop. (Array)</b></li>\r\n<li><b>Economy.shop.removeItem(memberID, guildID)</b>: <b>Removes an item from the shop. (Boolean)</b></li>\r\n<li><b>Economy.shop.searchItem(memberID, guildID)</b>: <b>Searches for the item in the shop. (Object)</b></li>\r\n<li><b>Economy.shop.useItem(itemID, memberID, guildID, client)</b>: <b>Uses the item from the user's inventory. Please note: 'client' parameter is your bot client and it's required only if your guild shop includes the items that will give a role to other user. If you specified your bot client, user will get his role once he buy the item. (Boolean)</b></li>\r\n</ul>\r\n\r\n## Changelog\r\n<b>1.0.1</b>\r\n<ul>\r\n  <li><b>The first version of the module: added a basic methods: 'Economy.fetch()', 'Economy.set()', 'Economy.add()', 'Economy.subtract()', 'Economy.daily()', 'Economy.work()', 'Economy.getDailyCooldown()', 'Economy.getWorkCooldown()', 'Economy.all()' and 'Economy.leaderboard()'. Also added an EconomyError class, but you couldn't use it yourself.</b></li>\r\n</ul>\r\n<b>1.0.2</b>\r\n<ul>\r\n  <li><b>Edited README.md</b></li>\r\n</ul>\r\n<b>1.0.3</b>\r\n<ul>\r\n  <li><b>Fixed bugs.</b></li>\r\n</ul>\r\n<b>1.0.4</b>\r\n<ul>\r\n  <li><b>Fixed bugs.</b></li>\r\n</ul>\r\n<b>1.0.5</b>\r\n<ul>\r\n  <li><b>Fixed bugs.</b></li>\r\n</ul>\r\n<b>1.0.6</b>\r\n<ul>\r\n  <li><b>Edited README.md</b></li>\r\n  <li><b>Fixed bugs.</b></li>\r\n  <li><b>Code optimization</b></li>\r\n  <li><b>Now you can create a shop on your Discord server using Economy.shop methods. They are listed above.</b></li>\r\n  <li><b>Added an 'EconomyError' class property.</b></li>\r\n  <li><b>Added a 'dateLocale' property for options object.</b></li>\r\n</ul>\r\n<b>1.0.7</b>\r\n<ul>\r\n  <li><b>Fixed bugs</b></li>\r\n</ul>\r\n<b>1.0.8</b>\r\n<ul>\r\n<li><b>Edted README.md</b></li>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Now this module is including Events. They are listed above.</b></li>\r\n</ul>\r\n<b>1.1.4</b>\r\n<ul>\r\n<li><b>Edted README.md</b></li>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Added an update checking system for this module.</b></li>\r\n<li><b>Added a 'checkUpdates' property for options object.</b></li>\r\n</ul>\r\n<b>1.1.5</b>\r\n<ul>\r\n<li><b>Edted README.md</b></li>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Updated the examples.</b></li>\r\n<li><b>Fixed the types.</b></li>\r\n<li><b>Added a Table of Contents in README.md</b></li>\r\n<li><b>If you have an earlier Node.js version than v14, you will receive an error.</b></li>\r\n<li><b>Now you can configure the update checking system settings using 'options.updater' properties in constructor options. The 'options.checkUpdates' property was removed in favor of 'options.updater' configuration object. Use 'options.updater.checkUpdates' instead.</b></li>\r\n<li><b>Added an error handler that will work on startup. You can configure it using 'options.errorHandler' properties in constructor options.</b></li>\r\n<li><b>Option properties 'description, 'mesasge' and 'maxAmount', in 'Economy.shop.addItem' method are optional now.</b></li>\r\n<li><b>Now everyone will have a Bank Balance. This is another type of money, you can use it whatever you want. :) | The methods are almost the same: 'Economy.bankFetch()', 'Economy.bankSet()', 'Economy.bankAdd()', 'Economy.bankSubtract()' and 'Economy.bankLeaderboard()'.</b></li>\r\n<li><b>Added a new events for Bank Balance: 'bankSet', 'bankAdd' and 'bankSubtract'.</b></li>\r\n<li><b>Now every balance and bank-balance event object is including 'type' and 'balance' properties. The first property is type of the operation ('set', 'add', 'subtract', 'bankSet', 'bankAdd', 'bankSubtract') and the second is user's new balance after the operation was completed successfully.</b></li>\r\n<li><b>Now you can manually check the module updates using the new 'Economy.checkUpdates()' method.</b></li>\r\n<li><b>Added an additional 'Economy.ready' and 'Economy.errored' properties to check the module state.</b></li>\r\n<li><b>Now you can add a role to users on your Discord server. Click <a href=\"https://www.npmjs.com/package/discord-economy-super#shop-methods\">here</a> for more info.</b></li>\r\n<li><b>Added a new 'shopItemBuy' and 'shopItemUse' events.</b></li>\r\n<li><b>Now if user try to buy an item when he reached the max amount of item in his inventory, the method will return a 'max' string.</b></li>\r\n<li><b>Now this module has a Support Server. Click <b><a href = \"https://discord.gg/afUTRzfb\">here</a></b> to join!</b></li>\r\n</ul>\r\n<b>1.1.6</b>\r\n<ul>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Fixed bug with \"The module is not ready to work\" error on startup.</b></li>\r\n<li><b>Removed an accidentaly added \"discord.js\" module from dependencies.</b></li>\r\n</ul>\r\n<b>1.1.7</b>\r\n<ul>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>TypeScript support is finally here! Created a type defenitions for this module.</b></li>\r\n</ul>\r\n<b>1.1.8</b>\r\n<ul>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Now you can disable checking a storage file using the 'options.checkStorage' option.</b></li>\r\n<li><b>Now you can kill the Economy instance using the 'Economy.kill()' method.</b></li>\r\n<li><b>'Economy.init()' method is not private anymore due to 'Economy.kill()' method.</b></li>\r\n<li><b>Added an 'interval' property that displays the database checking interval.</b></li>\r\n<li><b>Now you can clear the entire database using the 'Economy.clearStorage()' method.</b></li>\r\n<li><b>Now this module is using errors that in 'Economy.errors' property and in './src/errors.js' file.</b></li>\r\n<li><b>Now you can clear any cooldown using the 'Economy.clearDailyCooldown', 'Economy.clearWorkCooldown' and ''Economy.clearWeeklyCooldown' methods.</b></li>\r\n<li><b>Added a test for basic Economy methods. You can run it by using these commands:\r\n\r\n```console\r\ncd node_modules/discord-economy-super\r\nnpm test\r\n```\r\nThe test will look like this:\r\n\r\n![Test](https://cdn.discordapp.com/attachments/764192017542283325/838226957166313472/Screenshot_4.png)\r\n</b></li>\r\n</ul>\r\n<b>1.1.9</b>\r\n<ul>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Fixed type defenitions.</b></li>\r\n</ul>\r\n<b>1.2.0</b>\r\n<ul>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Fixed typos.</b></li>\r\n<li><b>'Economy.shop.clearInventory()' method is working fine now.</b></li>\r\n</ul>\r\n<b>1.2.1</b>\r\n<ul>\r\n<li><b>Fixed minor bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Now 'Economy.work()' method is not taking a daily cooldown as work reward anymore.</b></li>\r\n<li><b>Added an 'Economy.removeGuild()' method to fully remove the guild from database.</b></li>\r\n<li><b>Added an 'Economy.removeUser()' method to to remove the user from database.</b></li>\r\n</ul>\r\n<b>1.2.2</b>\r\n<ul>\r\n<li><b>Fixed minor bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Fixed another issues with 'Economy.work()' method...</b></li>\r\n</ul>\r\n<b>1.2.3</b>\r\n<ul>\r\n<li><b>Fixed minor bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>'Economy.leaderboard()' method will return an empty array if the leaderboard is empty.</b></li>\r\n<li><b>Updated examples.</b></li>\r\n<li><b>Fixed typos</b></li>\r\n</ul>\r\n<b>1.2.4</b>\r\n<ul>\r\n<li><b>Fixed minor bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>'Economy.daily()', '.work()' and '.weekly()' methods will return an object** instead of Number | String.</b></li>\r\n<li><b>Updated examples.</b></li>\r\n</ul>\r\n\r\n** The object structure will look like this:\r\n\r\n```js\r\n{\r\n    status: Boolean,\r\n    value: { // object returns if reward is already claimed; else - number\r\n        days: Number,\r\n        hours: Number,\r\n        minutes: Number,\r\n        seconds: Number,\r\n        milliseconds: Number\r\n    },\r\n    pretty: String | Number,\r\n    reward: Number | Array<Number> // array returns if work reward is array\r\n}\r\n```\r\n\r\n<b>1.2.5</b>\r\n<ul>\r\n<li><b>Fixed bugs.</b></li>\r\n<li><b>Code optimization.</b></li>\r\n<li><b>Fixed typos.</b></li>\r\n<li><b>Updated typings.</b></li>\r\n<li><b>Updated examples.</b></li>\r\n<li><b>discord.js is no longer imported in the module.</b></li>\r\n<li><b>Added a 'ready' and 'destroy' events. <a href = \"https://www.npmjs.com/package/discord-economy-super#module-events\">Learn more</a>.</b></li>\r\n<li><b>All balance and bank methods were moved to objects. <a href = \"https://www.npmjs.com/package/discord-economy-super#balance-methods\">Learn more</a>.</b></li>\r\n<b>Here is the difference between v1.2.4 and v1.2.5.</b>\r\n\r\n```diff\r\n- eco.fetch('123', '123')\r\n- eco.set(10, '123', '123')\r\n- eco.add(10, '123', '123')\r\n- eco.subtract(10, '123', '123')\r\n- eco.leaderboard('123')\r\n\r\n+ eco.balance.fetch('123', '123')\r\n+ eco.balance.set(10, '123', '123')\r\n+ eco.balance.add(10, '123', '123')\r\n+ eco.balance.subtract(10, '123', '123')\r\n+ eco.balance.leaderboard('123')\r\n\r\n- eco.bankFetch('123', '123')\r\n- eco.bankSet(10, '123', '123')\r\n- eco.bankAdd(10, '123', '123')\r\n- eco.bankSubtract(10, '123', '123')\r\n- eco.bankLeaderboard('123')\r\n\r\n+ eco.bank.fetch('123', '123')\r\n+ eco.bank.set(10, '123', '123')\r\n+ eco.bank.add(10, '123', '123')\r\n+ eco.bank.subtract(10, '123', '123')\r\n+ eco.bank.leaderboard('123')\r\n```\r\n<li><b>'Economy.balance.leaderboard()' and 'Economy.bank.leaderboard()' methods arrays are now have an 'index' property in object.</b></li>\r\n</ul>\r\n<b>1.2.6</b>\r\n<ul>\r\n<li><b>Fixed typos.</b></li>\r\n<li><b>Updated README.md.</b></li>\r\n<li><b>Now 'ready' and 'destroy' events will return nothing (Void) instead of Boolean.</b></li>\r\n</ul>\r\n<b>1.2.7</b>\r\n<ul>\r\n<li><b>Fixed typos.</b></li>\r\n<li><b>Fixed minor bugs.</b></li>\r\n<li><b>Item IDs in shop and inventory are now synced with the last element of array. It fixes the bug with similar item IDs in the shop and inventory.</b></li>\r\n</ul>\r\n\r\n## Useful Links\r\n<ul>\r\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">Github</a></b></li>\r\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Examples</a></b></li>\r\n<li><b><a href = \"https://discord.gg/afUTRzfb\">Discord Server</a></b></li>\r\n</ul>\r\n<b>If you found a bug, please send it in Discord to ShadowPlay#9706.</b>\r\n<br>\r\n<b>If you have any questions or need help, join the <a href = \"https://discord.gg/afUTRzfb\">Support Server</a>.</b>\r\n<br>\r\n<b>Module Created by ShadowPlay.</b>\r\n\r\n# Thanks for using Discord Economy Super ♥",
                    "path": "general/Welcome.md"
                },
                "Examples": {
                    "name": "Examples",
                    "type": "md",
                    "content": "# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## Install\n<b>Please note:</br><b>\n<b>Node.js 14.0.0 or newer is required.</b><br>\n<b>All types in brackets mean the type of what the method or event returns.</b>\n```console\nnpm i discord-economy-super\n```\n\n## Table of Contents\n<ul>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#starting\">Starting</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#constructor-options\">Constructor Options</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#module-methods\">Module Methods</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#module-properties\">Module Properties</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#module-events\">Module Events</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#example-events-usage\">Example Events Usage</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#balance-methods\">Balance Methods</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#bank-methods\">Bank Methods</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#shop-methods\">Shop Methods</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#changelog\">Changelog</a></b></li>\n  <li><b><a href=\"https://www.npmjs.com/package/discord-economy-super#useful-links\">Useful Links</a></b></li>\n</ul>\n\n## Starting\n<b>Let's create a simple Discord.js Client:</b>\n\n```js\nconst { Client, Intents } = require('discord.js'); // npm i discord.js\nconst client = new Client({ partials: ['CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION', 'USER'], ws: { intents: Intents.ALL } });\n\nclient.on('ready', () => {\n  console.log(`${bot.user.tag} is ready!`);\n});\n\nclient.login('token') // https://discord.com/developers/applications\n```\n<b>Now we need to import and initialize 'discord-economy-super':</b>\n\n```js\nconst { Client, Intents } = require('discord.js') // npm i discord.js\nconst client = new Client({\n    partials: ['CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION', 'USER'], \n    ws: {\n        intents: Intents.ALL \n    } \n});\n\nconst Economy = require('discord-economy-super');\nconst eco = new Economy({\n  storagePath: './storage.json', // Full path to a JSON File. Default: './storage.json'.\n  checkStorage: true, // Checks the if database file exists and if it has errors. Default: true.\n  dailyCooldown: 60000 * 60 * 24, // Daily Cooldown, ms (24 Hours = 1 Day). Default: 24 Hours (60000 * 60 * 24) ms.\n  workCooldown: 60000 * 60, // Work Cooldown, ms (1 Hour). Default: 1 Hour (60000 * 60) ms.\n  weeklyCooldown: 60000 * 60 * 24 * 7, // Cooldown for Weekly Command (in ms). Default: 7 Days (60000 * 60 * 24 * 7) ms\n  dailyAmount: 100, // Daily Amount. Default: 100.\n  workAmount: [10, 50], // Work Amount: first element is min value, second is max value (It also can be a Number). Default: [10, 50].\n  weeklyAmount: 1000, // Amount of money for Weekly Command. Default: 1000.\n  updateCountdown: 1000, // Checks for if storage file exists in specified time (in ms). Default: 1000.\n  dateLocale: 'ru', // The region (example: ru; en) to format date and time. Default: 'ru'.\n  updater: {\n        checkUpdates: true, // Sends the update state message in console on start. Default: true.\n        upToDateMessage: true // Sends the message in console on start if module is up to date. Default: true.\n    },\n    errorHandler: {\n        handleErrors: true, // Handles all errors on start. Default: true.\n        attempts: 5, // Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5.\n        time: 3000 // Time between every attempt to start the module. Default: 3000.\n    }\n});\n\nclient.on('ready', () => {\n  console.log(`${bot.user.tag} is ready!`);\n});\n\nclient.login('token') // https://discord.com/developers/applications\n```\n<br>\n<b>Now I will explain everything.</b>\n<b>This Module has a Constructor to initialize this Economy Module.</b>\n<br>\n\n## Constructor Options\n<ul>\n  <li><b>options.storagePath</b>: <b>Path for JSON File. Default: './storage.json.' (String)</b></li>\n  <li><b>options.checkStorage</b>: <b>Checks the if database file exists and if it has errors. Default: true. (Boolean)</b></li>\n  <li><b>options.dailyCooldown</b>: <b>Cooldown for Daily Command (in ms). Default: 24 Hours (60000 * 60 * 24) ms. (Number)</b></li>\n  <li><b>options.dailyAmount</b>: <b>Amount of money for Daily Command. Default: 100. (Number)</b></li>\n  <li><b>options.workCooldown</b>: <b>Cooldown for Work Command (in ms). Default: 1 Hour (60000 * 60) ms. (Number)</b></li>\n  <li><b>options.workAmout</b>: <b>Amount of money for Work Command. Default: [10, 50]. (Number)</b></li>\n  <li><b>options.updateCountdown</b>: <b>Checks for if storage file exists in specified time (in ms). Default: 1000. (Number)</b></li>\n  <li><b>options.dateLocale</b>: <b>The region (example: ru; en) to format date and time. Default: ru. (String)</b></li>\n  <li><b>options.updater</b>: <b>Update Checker options object:</b>\n   <ul>\n   <li><b>options.updater.checkUpdates.</b>: <b>Sends the update state message in console on start. Default: true. (Boolean)</b></li>\n   <li><b>options.updater.upToDateMessage</b>: <b> Sends the message in console on start if module is up to date. Default: true. (Boolean)</b></li>\n</ul>\n  <li><b>options.errorHandler</b>: <b>Error Handler options object:</b>\n   <ul>\n   <li><b>options.errorHandler.handleErrors.</b>: <b>Handles all errors on startup. Default: true. (Boolean)</b></li>\n   <li><b>options.errorHandler.attempts</b>: <b>Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5. (Number)</b></li>\n    <li><b>options.errorHandler.time</b>: <b>Time between every attempt to start the module. Default: 3000. (Number)</b></li>\n</ul>\n</ul>\n<b>Once the module starts, the update checker will show you a beautiful message in your console!</b>\n\n![Up To Date Example](https://cdn.discordapp.com/attachments/824016114191302699/830855168932315136/Screenshot_6.png)\n\n![Out Of Date Example](https://cdn.discordapp.com/attachments/824016114191302699/830855167120244736/Screenshot_5.png)\n\n## Module Methods\n<ul>\n  <li><b>daily(memberID, guildID)</b>: <b>Adds a daily reward on user's balance. (Object)</b></li>\n  <li><b>work(memberID, guildID)</b>: <b>Adds a work reward on user's balance. (Object)</b></li>\n  <li><b>weekly(memberID, guildID)</b>: <b>Adds a weekly reward on user's balance. (Object)</b></li>\n  <br>\n  <li><b>getDailyCooldown(memberID, guildID)</b>: <b>Returns a user's daily Cooldown. (Number)</b></li>\n  <li><b>getWorkCooldown(memberID, guildID)</b>: <b>Returns a user's work Cooldown. (Number)</b></li>\n  <li><b>getWeeklyCooldown(memberID, guildID)</b>: <b>Returns a user's weekly Cooldown. (Number)</b></li>\n  <br>\n  <li><b>clearDailyCooldown(memberID, guildID)</b>: <b>Clears user's daily cooldown. (Boolean)</b></li>\n  <li><b>clearWorkCooldown(memberID, guildID)</b>: <b>Clears user's work cooldown. (Boolean)</b></li>\n  <li><b>clearWeeklyCooldown(memberID, guildID)</b>: <b>Clears user's weekly cooldown. (Boolean)</b></li>\n  <br>\n  <li><b>all()</b>: <b>Returns the database contents. (Object)</b></li>\n  <li><b>checkUpdates()</b>: <b>Checks for if the module is up to date. Returns a promise with data object. (Promise: Object)</b></li>\n  <br>\n  <li><b>removeGuild(guildID)</b>: Fully removes the guild from database. (Boolean)</li>\n  <li><b>removeUser(memberID, guildID)</b>: Removes the user from database. (Boolean)</li>\n  <br>\n  <li><b>clearStorage()</b>: Clears the storage file. (Boolean)</li>\n  <li><b>kill()</b>: Kills the Economy instance. (Economy Instance)</li>\n  <li><b>init()</b>: Starts the module. (Promise: Boolean)</li>\n</ul>\n\n## Module Properties\n<ul>\n<li><b>Economy.version</b>: <b>Returns the module version. (Boolean)</b></li>\n<li><b>Economy.options</b>: <b>Returns the options object that you put in the Constructor (Object)</b></li>\n<li><b>Economy.EconomyError</b>: <b>Returns the error class that this module is using. (Class)</b></li>\n<li><b>Economy.shop</b>: <b>Methods to manage and use the shop on your Discord server. (Object)</b></li>\n<li><b>Economy.ready</b>: <b>Module ready status. (Boolean)</b></li>\n<li><b>Economy.errored</b>: <b>Module errored status. (Boolean)</b></li>\n<li><b>Economy.interval</b>: <b>Database checking interval. (NodeJS.Timeout)</b></li>\n<li><b>Economy.errors</b>: <b>Module errors object. (Object)</b></li>\n</ul>\n\n## Module Events\n<ul>\n<li><b>Economy.on('balanceSet')</b>: <b>Emits when you set the balance. (Object)</b></li>\n<li><b>Economy.on('balanceAdd')</b>: <b>Emits when you add money on user's balance. (Object)</b></li>\n<li><b>Economy.on('balanceSubtract')</b>: <b>Emits when you subtract money from user's balance. (Object)</b></li>\n<br>\n<li><b>Economy.on('bankSet')</b>: <b>Emits when you set the bank balance. (Object)</b></li>\n<li><b>Economy.on('bankAdd')</b>: <b>Emits when you add money on user's bank balance. (Object)</b></li>\n<li><b>Economy.on('bankSubtract')</b>: <b>Emits when you subtract money from user's bank balance. (Object)</b></li>\n<br>\n<li><b>Economy.on('shopAddItem')</b>: <b>Emits when you add the item in the guild shop. (Object)</b></li>\n<li><b>Economy.on('shopEditItem')</b>: <b>Emits when you edit the item in the guild shop. (Object)</b></li>\n<li><b>Economy.on('shopRemoveItem')</b>: <b>Emits when you remove the item from the guild shop. (Object)</b></li>\n<li><b>Economy.on('shopClear')</b>: <b>Emits when you clear the shop. (Boolean)</b></li>\n<li><b>Economy.on('shopItemBuy')</b>: <b>Emits when someone just bought the item from the shop. (Object)</b></li>\n<li><b>Economy.on('shopItemUse')</b>: <b>Emits when someone just used the item from his inventory. (Object)</b></li>\n<br>\n<li><b>Economy.on('ready')</b>: <b>Emits when the economy instance is ready. (Void)</b></li>\n<li><b>Economy.on('destroy')</b>: <b>Emits when the economy instance is destroyed. (Void)</b></li>\n</ul>\n\n## Example Events Usage\n```js\nconst { Client, Intents } = require('discord.js') // npm i discord.js\nconst client = new Client({\n    partials: ['CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION', 'USER'], \n    ws: {\n        intents: Intents.ALL \n    }\n});\n\nconst Economy = require('discord-economy-super');\nconst eco = new Economy({\n  storagePath: './storage.json', // Full path to a JSON File. Default: './storage.json'.\n  checkStorage: true, // Checks the if database file exists and if it has errors. Default: true.\n  dailyCooldown: 60000 * 60 * 24, // Daily Cooldown, ms (24 Hours = 1 Day). Default: 24 Hours (60000 * 60 * 24) ms.\n  workCooldown: 60000 * 60, // Work Cooldown, ms (1 Hour). Default: 1 Hour (60000 * 60) ms.\n  weeklyCooldown: 60000 * 60 * 24 * 7, // Cooldown for Weekly Command (in ms). Default: 7 Days (60000 * 60 * 24 * 7) ms\n  dailyAmount: 100, // Daily Amount. Default: 100.\n  workAmount: [10, 50], // Work Amount: first element is min value, second is max value (It also can be a Number). Default: [10, 50].\n  weeklyAmount: 1000, // Amount of money for Weekly Command. Default: 1000.\n  updateCountdown: 1000, // Checks for if storage file exists in specified time (in ms). Default: 1000.\n  dateLocale: 'ru', // The region (example: ru; en) to format date and time. Default: 'ru'.\n  updater: {\n        checkUpdates: true, // Sends the update state message in console on start. Default: true.\n        upToDateMessage: true // Sends the message in console on start if module is up to date. Default: true.\n    },\n    errorHandler: {\n        handleErrors: true, // Handles all errors on start. Default: true.\n        attempts: 5, // Amount of attempts to load the module. Use 'null' for infinity attempts. Default: 5.\n        time: 3000 // Time between every attempt to start the module. Default: 3000.\n    }\n});\n\nclient.on('ready', () => {\n  console.log(`${bot.user.tag} is ready!`);\n});\n\n// balance events\neco.on('balanceSet', balance => {\n    console.log(`Someone's just set ${balance.amount} coins for balance for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\n})\neco.on('balanceAdd', balance => {\n    console.log(`Someone's just added ${balance.amount} coins for balance for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\n})\neco.on('balanceSubtract', balance => {\n    console.log(`Someone's just subtracted ${balance.amount} coins from balance for member ${balance.memberID} on guild ${balance.guildID}. His balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'.`)\n})\n\n\n// bank balance events\neco.on('bankSet', balance => {\n    console.log(`Someone's just set ${balance.amount} coins in bank for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\n})\neco.on('bankAdd', balance => {\n    console.log(`Someone's just added ${balance.amount} coins in bank for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\n})\neco.on('bankSubtract', balance => {\n    console.log(`Someone's just subtracted ${balance.amount} coins from bank for member ${balance.memberID} on guild ${balance.guildID}. His bank balance is ${balance.balance} coins now.\\nReason: ${balance.reason}\\nOperation type: '${balance.type}'`)\n})\n\n// shop events\neco.on('shopAddItem', item => {\n    console.log(`Someone's just added an item in the shop!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description}\\nMessage on use: ${item.message}\\nMax amount of item in inventory: ${item.maxAmount}\\nRole ID: ${item.role || 'Not specified'}`)\n})\neco.on('shopRemoveItem', item => {\n    console.log(`Someone's just removed an item from the shop!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description}\\nMessage on use: ${item.message}\\nMax amount of item in inventory: ${item.maxAmount}\\nRole ID: ${item.role || 'Not specified'}`)\n})\neco.on('shopEditItem', item => {\n    console.log(`Someone's just edited an item in the shop!\\nID: ${item.id}\\Guild ID: ${item.guildID}\\nWhat changed: ${item.changed}\\nBefore: ${item.oldValue}\\nAfter: ${item.newValue}`)\n})\neco.on('shopItemBuy', item => {\n    console.log(`Someone's just bought an item from the shop!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description || 'Not specified'}\\nMessage on use: ${item.message || 'Not specified'}\\nMax amount of item in inventory: ${item.maxAmount || 'Any'}\\nRole ID: ${item.role || 'Not specified'}`)\n})\neco.on('shopItemUse', item => {\n    console.log(`Someone's just used an item!\\nItem data:\\nID: ${item.id}\\nName: ${item.itemName}\\nPrice: ${item.price}\\nDescription: ${item.description || 'Not specified'}\\nMessage on use: ${item.message || 'Not specified'}\\nMax amount of item in inventory: ${item.maxAmount || 'Any'}\\nRole ID: ${item.role || 'Not specified'}`)\n})\neco.on('shopClear', cleared => {\n  if(cleared) console.log('The shop was cleared successfully!')\n  else console.log('Cannot clear the shop!')\n})\n\n\n// core events\neco.on('ready', () => {\n    console.log('Economy is ready!')\n})\neco.on('destroy', () => {\n    console.log('Economy was destroyed.')\n})\n\nclient.login('token') // https://discord.com/developers/applications\n```\n<br>\n\n## Balance Methods\n<ul>\n    <li><b>fetch(memberID, guildID)</b>: <b>Returns the user's balance. (Number)</b></li>\n    <li><b>set(amount, memberID, guildID, reason)</b>: <b>Sets money to user's balance. (Number)</b></li>\n    <li><b>add(amount, memberID, guildID, reason)</b>: <b>Adds money to user's balance. (Number)</b></li>\n    <li><b>subtract(amount, memberID, guildID, reason)</b>: <b>Subtracts money from user's balance. (Number)</b></li>\n    <li><b>leaderboard(guildID)</b>: <b>Returns a money leaderboard array. (Array)</b></li>\n</ul>\n\n## Bank Methods\n<ul>\n    <li><b>fetch(memberID, guildID)</b>: <b>Returns the user's bank balance. (Number)</b></li>\n    <li><b>set(amount, memberID, guildID, reason)</b>: <b>Sets money to user's bank balance. (Number)</b></li>\n    <li><b>add(amount, memberID, guildID, reason)</b>: <b>Adds money to user's bank balance. (Number)</b></li>\n    <li><b>subtract(amount, memberID, guildID, reason)</b>: <b>Subtracts money from user's bank balance. (Number)</b></li>\n    <li><b>leaderboard(guildID)</b>: <b>Returns a bank balance leaderboard array. (Array)</b></li>\n</ul>\n\n## Shop Methods\n<ul>\n<li><b>Economy.shop.addItem(guildID, options)</b>: <b>Creates an item in shop. (Object)</b></li>\n   <ul>\n   <li><b>options.itemName</b>: <b>Name for the item. (String)</b></li>\n   <li><b>options.price</b>: <b>Price of the item. (Number)</b></li>\n   <li><b>options.message</b>: <b>Item message that will be returned on Economy.shop.buy() method. [Optional] (String)</b></li>\n   <li><b>options.description</b>: <b>Description of the item. [Optional] (String)</b></li> \n   <li><b>options.maxAmount</b>: <b>Max amount of item that user can hold in his inventory. [Optional] (Number)</b></li>\n   <li><b>options.role</b>: <b>A role ID that bot will give to others users. Please note: you need to specify a bot client in 'Economy.shop.useItem' method if you need to give a role to user on Discord server. [Optional] (String)</b></li>\n</ul>\n</li> \n<li><b>Economy.shop.buy(itemID, memberID, guildID, reason)</b>: <b>Buys the item from the shop. But if user try to buy an item when he reached the max amount of item in his inventory, it will return a 'max' string. (Boolean | String)</b></li>\n<li><b>Economy.shop.clear(guildID)</b>: <b>Clears the shop. (Boolean)</b></li>\n<li><b>Economy.shop.clearHistory(memberID, guildID)</b>: <b>Clears the user's purchases history. (Boolean)</b></li>\n<li><b>Economy.shop.clearInventory(memberID, guildID)</b>: <b>Clears the user's inventory. (Boolean)</b></li>\n<li><b>Economy.shop.editItem(itemID, guildID, arg, value)</b>: <b>Edits the item in shop. The 'arg' parameter must be one of these values: 'description', 'price', 'itemName', 'message', 'maxAmount' and 'role'. (Boolean)</b></li>\n<li><b>Economy.shop.history(memberID, guildID)</b>: <b>Shows the user's purchases history. (Array)</b></li>\n<li><b>Economy.shop.inventory(memberID, guildID)</b>: <b>Shows all items in user's inventory. (Array)</b></li>\n<li><b>Economy.shop.list(guildID)</b>: <b>Shows all items in the shop. (Array)</b></li>\n<li><b>Economy.shop.removeItem(memberID, guildID)</b>: <b>Removes an item from the shop. (Boolean)</b></li>\n<li><b>Economy.shop.searchItem(memberID, guildID)</b>: <b>Searches for the item in the shop. (Object)</b></li>\n<li><b>Economy.shop.useItem(itemID, memberID, guildID, client)</b>: <b>Uses the item from the user's inventory. Please note: 'client' parameter is your bot client and it's required only if your guild shop includes the items that will give a role to other user. If you specified your bot client, user will get his role once he buy the item. (Boolean)</b></li>\n</ul>\n\n## Changelog\n<b>1.0.1</b>\n<ul>\n  <li><b>The first version of the module: added a basic methods: 'Economy.fetch()', 'Economy.set()', 'Economy.add()', 'Economy.subtract()', 'Economy.daily()', 'Economy.work()', 'Economy.getDailyCooldown()', 'Economy.getWorkCooldown()', 'Economy.all()' and 'Economy.leaderboard()'. Also added an EconomyError class, but you couldn't use it yourself.</b></li>\n</ul>\n<b>1.0.2</b>\n<ul>\n  <li><b>Edited README.md</b></li>\n</ul>\n<b>1.0.3</b>\n<ul>\n  <li><b>Fixed bugs.</b></li>\n</ul>\n<b>1.0.4</b>\n<ul>\n  <li><b>Fixed bugs.</b></li>\n</ul>\n<b>1.0.5</b>\n<ul>\n  <li><b>Fixed bugs.</b></li>\n</ul>\n<b>1.0.6</b>\n<ul>\n  <li><b>Edited README.md</b></li>\n  <li><b>Fixed bugs.</b></li>\n  <li><b>Code optimization</b></li>\n  <li><b>Now you can create a shop on your Discord server using Economy.shop methods. They are listed above.</b></li>\n  <li><b>Added an 'EconomyError' class property.</b></li>\n  <li><b>Added a 'dateLocale' property for options object.</b></li>\n</ul>\n<b>1.0.7</b>\n<ul>\n  <li><b>Fixed bugs</b></li>\n</ul>\n<b>1.0.8</b>\n<ul>\n<li><b>Edted README.md</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Now this module is including Events. They are listed above.</b></li>\n</ul>\n<b>1.1.4</b>\n<ul>\n<li><b>Edted README.md</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Added an update checking system for this module.</b></li>\n<li><b>Added a 'checkUpdates' property for options object.</b></li>\n</ul>\n<b>1.1.5</b>\n<ul>\n<li><b>Edted README.md</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Updated the examples.</b></li>\n<li><b>Fixed the types.</b></li>\n<li><b>Added a Table of Contents in README.md</b></li>\n<li><b>If you have an earlier Node.js version than v14, you will receive an error.</b></li>\n<li><b>Now you can configure the update checking system settings using 'options.updater' properties in constructor options. The 'options.checkUpdates' property was removed in favor of 'options.updater' configuration object. Use 'options.updater.checkUpdates' instead.</b></li>\n<li><b>Added an error handler that will work on startup. You can configure it using 'options.errorHandler' properties in constructor options.</b></li>\n<li><b>Option properties 'description, 'mesasge' and 'maxAmount', in 'Economy.shop.addItem' method are optional now.</b></li>\n<li><b>Now everyone will have a Bank Balance. This is another type of money, you can use it whatever you want. :) | The methods are almost the same: 'Economy.bankFetch()', 'Economy.bankSet()', 'Economy.bankAdd()', 'Economy.bankSubtract()' and 'Economy.bankLeaderboard()'.</b></li>\n<li><b>Added a new events for Bank Balance: 'bankSet', 'bankAdd' and 'bankSubtract'.</b></li>\n<li><b>Now every balance and bank-balance event object is including 'type' and 'balance' properties. The first property is type of the operation ('set', 'add', 'subtract', 'bankSet', 'bankAdd', 'bankSubtract') and the second is user's new balance after the operation was completed successfully.</b></li>\n<li><b>Now you can manually check the module updates using the new 'Economy.checkUpdates()' method.</b></li>\n<li><b>Added an additional 'Economy.ready' and 'Economy.errored' properties to check the module state.</b></li>\n<li><b>Now you can add a role to users on your Discord server. Click <a href=\"https://www.npmjs.com/package/discord-economy-super#shop-methods\">here</a> for more info.</b></li>\n<li><b>Added a new 'shopItemBuy' and 'shopItemUse' events.</b></li>\n<li><b>Now if user try to buy an item when he reached the max amount of item in his inventory, the method will return a 'max' string.</b></li>\n<li><b>Now this module has a Support Server. Click <b><a href = \"https://discord.gg/afUTRzfb\">here</a></b> to join!</b></li>\n</ul>\n<b>1.1.6</b>\n<ul>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed bug with \"The module is not ready to work\" error on startup.</b></li>\n<li><b>Removed an accidentaly added \"discord.js\" module from dependencies.</b></li>\n</ul>\n<b>1.1.7</b>\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>TypeScript support is finally here! Created a type defenitions for this module.</b></li>\n</ul>\n<b>1.1.8</b>\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Now you can disable checking a storage file using the 'options.checkStorage' option.</b></li>\n<li><b>Now you can kill the Economy instance using the 'Economy.kill()' method.</b></li>\n<li><b>'Economy.init()' method is not private anymore due to 'Economy.kill()' method.</b></li>\n<li><b>Added an 'interval' property that displays the database checking interval.</b></li>\n<li><b>Now you can clear the entire database using the 'Economy.clearStorage()' method.</b></li>\n<li><b>Now this module is using errors that in 'Economy.errors' property and in './src/errors.js' file.</b></li>\n<li><b>Now you can clear any cooldown using the 'Economy.clearDailyCooldown', 'Economy.clearWorkCooldown' and ''Economy.clearWeeklyCooldown' methods.</b></li>\n<li><b>Added a test for basic Economy methods. You can run it by using these commands:\n\n```console\ncd node_modules/discord-economy-super\nnpm test\n```\nThe test will look like this:\n\n![Test](https://cdn.discordapp.com/attachments/764192017542283325/838226957166313472/Screenshot_4.png)\n</b></li>\n</ul>\n<b>1.1.9</b>\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed type defenitions.</b></li>\n</ul>\n<b>1.2.0</b>\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>'Economy.shop.clearInventory()' method is working fine now.</b></li>\n</ul>\n<b>1.2.1</b>\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Now 'Economy.work()' method is not taking a daily cooldown as work reward anymore.</b></li>\n<li><b>Added an 'Economy.removeGuild()' method to fully remove the guild from database.</b></li>\n<li><b>Added an 'Economy.removeUser()' method to to remove the user from database.</b></li>\n</ul>\n<b>1.2.2</b>\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed another issues with 'Economy.work()' method...</b></li>\n</ul>\n<b>1.2.3</b>\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>'Economy.leaderboard()' method will return an empty array if the leaderboard is empty.</b></li>\n<li><b>Updated examples.</b></li>\n<li><b>Fixed typos</b></li>\n</ul>\n<b>1.2.4</b>\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>'Economy.daily()', '.work()' and '.weekly()' methods will return an object** instead of Number | String.</b></li>\n<li><b>Updated examples.</b></li>\n</ul>\n\n** The object structure will look like this:\n\n```js\n{\n    status: Boolean,\n    value: { // object returns if reward is already claimed; else - number\n        days: Number,\n        hours: Number,\n        minutes: Number,\n        seconds: Number,\n        milliseconds: Number\n    },\n    pretty: String | Number,\n    reward: Number | Array<Number> // array returns if work reward is array\n}\n```\n\n<b>1.2.5</b>\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>Updated typings.</b></li>\n<li><b>Updated examples.</b></li>\n<li><b>discord.js is no longer imported in the module.</b></li>\n<li><b>Added a 'ready' and 'destroy' events. <a href = \"https://www.npmjs.com/package/discord-economy-super#module-events\">Learn more</a>.</b></li>\n<li><b>All balance and bank methods were moved to objects. <a href = \"https://www.npmjs.com/package/discord-economy-super#balance-methods\">Learn more</a>.</b></li>\n<b>Here is the difference between v1.2.4 and v1.2.5.</b>\n\n```diff\n- eco.fetch('123', '123')\n- eco.set(10, '123', '123')\n- eco.add(10, '123', '123')\n- eco.subtract(10, '123', '123')\n- eco.leaderboard('123')\n\n+ eco.balance.fetch('123', '123')\n+ eco.balance.set(10, '123', '123')\n+ eco.balance.add(10, '123', '123')\n+ eco.balance.subtract(10, '123', '123')\n+ eco.balance.leaderboard('123')\n\n- eco.bankFetch('123', '123')\n- eco.bankSet(10, '123', '123')\n- eco.bankAdd(10, '123', '123')\n- eco.bankSubtract(10, '123', '123')\n- eco.bankLeaderboard('123')\n\n+ eco.bank.fetch('123', '123')\n+ eco.bank.set(10, '123', '123')\n+ eco.bank.add(10, '123', '123')\n+ eco.bank.subtract(10, '123', '123')\n+ eco.bank.leaderboard('123')\n```\n<li><b>'Economy.balance.leaderboard()' and 'Economy.bank.leaderboard()' methods arrays are now have an 'index' property in object.</b></li>\n</ul>\n<b>1.2.6</b>\n<ul>\n<li><b>Fixed typos.</b></li>\n<li><b>Updated README.md.</b></li>\n<li><b>Now 'ready' and 'destroy' events will return nothing (Void) instead of Boolean.</b></li>\n</ul>\n<b>1.2.7</b>\n<ul>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Item IDs in shop and inventory are now synced with the last element of array. It fixes the bug with similar item IDs in the shop and inventory.</b></li>\n</ul>\n\n## Useful Links\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">Github</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/afUTRzfb\">Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, please send it in Discord to ShadowPlay#9706.</b>\n<br>\n<b>If you have any questions or need help, join the <a href = \"https://discord.gg/afUTRzfb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# Thanks for using Discord Economy Super ♥",
                    "path": "general/Examples.md"
                }
            }
        }
    },
    "classes": [
        {
            "name": "MusicPlayer",
            "construct": {
                "name": "MusicPlayer",
                "description": "MusicPlayer Constructor",
                "params": [
                    {
                        "name": "client",
                        "description": "Discord Client",
                        "type": [
                            [
                                [
                                    "Client"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "methods": [
                {
                    "name": "play",
                    "description": "Method for playing songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song",
                            "description": "Song Object",
                            "type": [
                                [
                                    [
                                        "Song"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Event",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns the event of the module"
                    },
                    "meta": {
                        "line": 48,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "searchVideo",
                    "description": "Method to search for songs by user request",
                    "params": [
                        {
                            "name": "member",
                            "description": "Discord GuildMember",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "searchString",
                            "description": "Search String",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "message",
                            "description": "Discord Message",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "Song",
                                    ">>"
                                ]
                            ]
                        ],
                        "description": "Returns a list of found songs"
                    },
                    "meta": {
                        "line": 100,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "getSongIndex",
                    "description": "Method for getting song index",
                    "params": [
                        {
                            "name": "tracksArray",
                            "description": "Songs Array",
                            "type": [
                                [
                                    [
                                        "Array",
                                        "<"
                                    ],
                                    [
                                        "String",
                                        ">"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "message",
                            "description": "Discord Message",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Number",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns the position of the song from the list"
                    },
                    "meta": {
                        "line": 175,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "addSong",
                    "description": "Method for adding a song to the server queue",
                    "params": [
                        {
                            "name": "index",
                            "description": "Song Index",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "tracksArray",
                            "description": "Songs Array",
                            "type": [
                                [
                                    [
                                        "Array",
                                        "<"
                                    ],
                                    [
                                        "String",
                                        ">"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "textChannel",
                            "description": "Discord TextChannel",
                            "type": [
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "voiceChannel",
                            "description": "Discord VoiceChannel",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Event",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns the event of the module"
                    },
                    "meta": {
                        "line": 212,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "skipSong",
                    "description": "Method for skipping songs in the queue",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "song",
                                    ": "
                                ],
                                [
                                    "Song",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns an object with a skip status and a song object."
                    },
                    "meta": {
                        "line": 252,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "getQueue",
                    "description": "Method for getting a queue of server songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "Song",
                                    ">>"
                                ]
                            ]
                        ],
                        "description": "Returns an array of songs being played on the server"
                    },
                    "meta": {
                        "line": 285,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "setLoopSong",
                    "description": "Method for setting the current song to repet from the server queue",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "song",
                                    ": "
                                ],
                                [
                                    "Song",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns the song repeat status and object"
                    },
                    "meta": {
                        "line": 303,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "setLoopQueue",
                    "description": "Method for setting to repeat server queue songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "songs",
                                    ": "
                                ],
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "Song",
                                    ">}>"
                                ]
                            ]
                        ],
                        "description": "Returns the repeat status of the queue and its object"
                    },
                    "meta": {
                        "line": 324,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "stopPlaying",
                    "description": "Method for ending playing a queue of songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Boolean",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns true on success"
                    },
                    "meta": {
                        "line": 345,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "pausePlaying",
                    "description": "Method to pause song playback",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Boolean",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns `true` on success"
                    },
                    "meta": {
                        "line": 367,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "resumePlaying",
                    "description": "Method to restore playing songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Boolean",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns `true` on success"
                    },
                    "meta": {
                        "line": 389,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "setVolume",
                    "description": "Method for changing the playback volume of songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "volumeValue",
                            "description": "Volume Value",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "volume",
                                    ": "
                                ],
                                [
                                    "Number",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns the volume setting status and value"
                    },
                    "meta": {
                        "line": 412,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "getCurrentSongInfo",
                    "description": "Method for getting information about the current song",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "guildMap",
                                    ": "
                                ],
                                [
                                    "GuildMap",
                                    ", "
                                ],
                                [
                                    "songInfo",
                                    ": "
                                ],
                                [
                                    "Song",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns an object with information about the current song and server queue"
                    },
                    "meta": {
                        "line": 438,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "joinVoiceChannel",
                    "description": "Method for joining your bot in voice channel",
                    "params": [
                        {
                            "name": "member",
                            "description": "Discord GuildMember",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "voiceChannel",
                                    ": "
                                ],
                                [
                                    "VoiceChannel",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns the status and object of the voice channel"
                    },
                    "meta": {
                        "line": 475,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "leaveVoiceChannel",
                    "description": "Method for left your bot the voice channel",
                    "params": [
                        {
                            "name": "member",
                            "description": "Discord GuildMember",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "voiceChannel",
                                    ": "
                                ],
                                [
                                    "VoiceChannel",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns the status and object of the voice channel"
                    },
                    "meta": {
                        "line": 496,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "createProgressBar",
                    "description": "Method for creating progress bar",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "bar",
                                    ": "
                                ],
                                [
                                    "String",
                                    ", "
                                ],
                                [
                                    "percents",
                                    ": "
                                ],
                                [
                                    "String",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns an object with the progress bar data"
                    },
                    "meta": {
                        "line": 517,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "setFilter",
                    "description": "Sets the filter for server queue songs",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "filter",
                            "description": "Filter Name",
                            "type": [
                                [
                                    [
                                        "3d",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "bassboost",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "echo",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "flanger",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "gate",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "haas",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "karaoke",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "nightcore",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "reverse",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "vaporwave",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "mcompand",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "phaser",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "tremolo",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "surround",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "earwax",
                                        "'"
                                    ]
                                ],
                                [
                                    [
                                        "clear",
                                        "'"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "status",
                                    ": "
                                ],
                                [
                                    "Boolean",
                                    ", "
                                ],
                                [
                                    "filter",
                                    ": "
                                ],
                                [
                                    "String",
                                    ", "
                                ],
                                [
                                    "queue",
                                    ": "
                                ],
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "Song",
                                    ">}>"
                                ]
                            ]
                        ],
                        "description": "Returns installation status, filter name and server queue array"
                    },
                    "meta": {
                        "line": 567,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "getGuildMap",
                    "description": "Method for getting guild map",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "GuildMap",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns an object with server queue parameters"
                    },
                    "meta": {
                        "line": 590,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "getFilters",
                    "description": "Method for getting all filters of a module",
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "Filters",
                                    ">>"
                                ]
                            ]
                        ],
                        "description": "Returns an array of all filters in the module"
                    },
                    "meta": {
                        "line": 607,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "getLyrics",
                    "description": "Method for getting the lyrics of the current song",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "song",
                                    ": "
                                ],
                                [
                                    "String",
                                    ", "
                                ],
                                [
                                    "lyrics",
                                    ": "
                                ],
                                [
                                    "String",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Returns an object with the name of the song and lyrics to it"
                    },
                    "meta": {
                        "line": 618,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "shuffle",
                    "description": "Method for shuffling songs in queue",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "GuildMap",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns an object with server queue parameters"
                    },
                    "meta": {
                        "line": 639,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "removeSong",
                    "description": "Method for removing songs from the queue by ID/title",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song_Name_ID",
                            "description": "Song Index or Name in queue",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ],
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<{"
                                ],
                                [
                                    "song",
                                    ": "
                                ],
                                [
                                    "Object",
                                    ", "
                                ],
                                [
                                    "songs",
                                    ": "
                                ],
                                [
                                    "Number",
                                    "}>"
                                ]
                            ]
                        ],
                        "description": "Return removed song info and song count in queue"
                    },
                    "meta": {
                        "line": 663,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "formatNumbers",
                    "description": "Method for formatting numbers",
                    "params": [
                        {
                            "name": "numbersArray",
                            "description": "Numbers Array",
                            "type": [
                                [
                                    [
                                        "Array"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Array",
                                    "<"
                                ],
                                [
                                    "String",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns an array with formatted numbers"
                    },
                    "meta": {
                        "line": 693,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "createStream",
                    "description": "Starts the song stream",
                    "access": "private",
                    "params": [
                        {
                            "name": "guild",
                            "description": "Discord Guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "Readable",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Returns a new stream object"
                    },
                    "meta": {
                        "line": 713,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "initPlayer",
                    "description": "Method for initialization module",
                    "access": "private",
                    "meta": {
                        "line": 743,
                        "file": "Player.js",
                        "path": "test"
                    }
                }
            ],
            "events": [
                {
                    "name": "playingSong",
                    "params": [
                        {
                            "name": "data",
                            "description": "Callback",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.textChannel",
                            "description": "Queue Text Channel",
                            "type": [
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.voiceChannel",
                            "description": "Queue Voice Channel",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.voiceChannel",
                            "description": "Queue Voice Channel",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.connection",
                            "description": "Queue Voice Connection",
                            "type": [
                                [
                                    [
                                        "VoiceConnection"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.songs",
                            "description": "Queue Songs",
                            "type": [
                                [
                                    [
                                        "Array",
                                        "<"
                                    ],
                                    [
                                        "Object",
                                        ">"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.volume",
                            "description": "Queue Songs Volume",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.loop",
                            "description": "Queue Song Loop",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.queueLoop",
                            "description": "Queue Song Queue Loop",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.playing",
                            "description": "Queue Song Playing Status",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.filter",
                            "description": "Queue Songs Filter",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 752,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "songAdded",
                    "params": [
                        {
                            "name": "song",
                            "description": "Callback",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.index",
                            "description": "Song Position in Queue",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.searchType",
                            "description": "Search Type (URL or Name)",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.title",
                            "description": "Song Title",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.url",
                            "description": "Song URL",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.thumbnail",
                            "description": "Song Thumbnail",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.author",
                            "description": "Song Uploader",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.textChannel",
                            "description": "Text Channel",
                            "type": [
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.voiceChannel",
                            "description": "Voice Channel",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.requestedBy",
                            "description": "Requester of the Song",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "song.duration",
                            "description": "Song Duration",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 768,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "queueEnded",
                    "params": [
                        {
                            "name": "data",
                            "description": "Callback",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.textChannel",
                            "description": "Queue Text Channel",
                            "type": [
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.voiceChannel",
                            "description": "Queue Voice Channel",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.voiceChannel",
                            "description": "Queue Voice Channel",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.connection",
                            "description": "Queue Voice Connection",
                            "type": [
                                [
                                    [
                                        "VoiceConnection"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.songs",
                            "description": "Queue Songs",
                            "type": [
                                [
                                    [
                                        "Array",
                                        "<"
                                    ],
                                    [
                                        "Object",
                                        ">"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.volume",
                            "description": "Queue Songs Volume",
                            "type": [
                                [
                                    [
                                        "Number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.loop",
                            "description": "Queue Song Loop",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.queueLoop",
                            "description": "Queue Song Queue Loop",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.playing",
                            "description": "Queue Song Playing Status",
                            "type": [
                                [
                                    [
                                        "Boolean"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.filter",
                            "description": "Queue Songs Filter",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 784,
                        "file": "Player.js",
                        "path": "test"
                    }
                },
                {
                    "name": "playerError",
                    "params": [
                        {
                            "name": "data",
                            "description": "Callback",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.textChannel",
                            "description": "Text Channel",
                            "type": [
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.message",
                            "description": "Message",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.method",
                            "description": "Executed Method",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "data.error",
                            "description": "Returned Error",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 800,
                        "file": "Player.js",
                        "path": "test"
                    }
                }
            ],
            "meta": {
                "line": 10,
                "file": "Player.js",
                "path": "test"
            }
        }
    ],
    "interfaces": [],
    "typedefs": [],
    "externals": []
}
